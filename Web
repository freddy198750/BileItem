import { useState, useRef } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import html2canvas from "html2canvas";

export default function ProductCalculator() {
  const [items, setItems] = useState([]);
  const [quantity, setQuantity] = useState("");
  const [name, setName] = useState("");
  const [price, setPrice] = useState("");
  const [total, setTotal] = useState(0);
  const [deleteIndex, setDeleteIndex] = useState("");
  const receiptRef = useRef(null);

  const specialFont = (text) => {
    const mapping = {
      "0": "O", "1": "ùü∑", "2": "ùü∏", "3": "ùüπ", "4": "ùü∫", "5": "ùüª", "6": "ùüº", "7": "ùüΩ", "8": "ùüæ", "9": "ùüø",
      "a": "ùöä", "b": "ùöã", "c": "ùöå", "d": "ùöç", "e": "ùöé", "f": "ùöè", "g": "ùöê", "h": "ùöë", "i": "ùöí", "j": "ùöì", "k": "ùöî", "l": "ùöï", "m": "ùöñ",
      "n": "ùöó", "o": "ùöò", "p": "ùöô", "q": "ùöö", "r": "ùöõ", "s": "ùöú", "t": "ùöù", "u": "ùöû", "v": "ùöü", "w": "ùö†", "x": "ùö°", "y": "ùö¢", "z": "ùö£"
    };
    return text.split('').map(char => mapping[char.toLowerCase()] || char).join('');
  };

  const addItem = () => {
    if (quantity && name && price) {
      const newItem = { quantity: parseInt(quantity), name: specialFont(name), price: parseFloat(price) };
      setItems([...items, newItem]);
      setTotal(total + newItem.price * newItem.quantity);
      setQuantity("");
      setName("");
      setPrice("");
    }
  };

  const removeItem = () => {
    const index = parseInt(deleteIndex) - 1;
    if (index >= 0 && index < items.length) {
      const newItems = items.filter((_, i) => i !== index);
      setTotal(newItems.reduce((sum, item) => sum + item.price * item.quantity, 0));
      setItems(newItems);
    }
    setDeleteIndex("");
  };

  const saveReceipt = () => {
    html2canvas(receiptRef.current).then((canvas) => {
      const link = document.createElement("a");
      link.href = canvas.toDataURL("image/png");
      link.download = "receipt.png";
      link.click();
    });
  };

  return (
    <div className="flex flex-col items-center p-4 space-y-4">
      <Card className="w-full max-w-md p-4">
        <CardContent>
          <div className="space-y-2">
            <Input placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" type="number" value={quantity} onChange={(e) => setQuantity(e.target.value)} />
            <Input placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" value={name} onChange={(e) => setName(e.target.value)} />
            <Input placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" type="number" value={price} onChange={(e) => setPrice(e.target.value)} />
            <Button onClick={addItem} className="w-full">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</Button>
          </div>
        </CardContent>
      </Card>

      <Card className="w-full max-w-md p-4" ref={receiptRef}>
        <CardContent>
          <h2 className="text-center text-xl font-bold">kbank</h2>
          <p className="text-center">171-1-48625-5</p>
          <div className="flex justify-between font-semibold mt-4">
            <span>Item</span>
            <span>Price</span>
          </div>
          <hr />
          {items.map((item, index) => (
            <div key={index} className="flex justify-between">
              <span>{specialFont((index + 1).toString())}. {specialFont(item.quantity.toString())}x {item.name}</span>
              <span>{specialFont((item.price * item.quantity).toFixed(2))}</span>
            </div>
          ))}
          <hr />
          <div className="flex justify-between font-bold">
            <span>t o t a l</span>
            <span>‡∏ø{specialFont(total.toFixed(2))}</span>
          </div>
          <hr />
          <p className="text-center mt-2">„Ö§‡πÇ‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ + ‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞</p>
        </CardContent>
      </Card>
      <div className="flex space-x-2">
        <Button onClick={saveReceipt} className="w-full">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ</Button>
        <Button onClick={() => setItems([])} className="w-full">‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</Button>
      </div>
      <div className="flex space-x-2 mt-4">
        <Input placeholder="‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö" type="number" value={deleteIndex} onChange={(e) => setDeleteIndex(e.target.value)} />
        <Button onClick={removeItem} className="w-full">‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</Button>
      </div>
    </div>
  );
}
